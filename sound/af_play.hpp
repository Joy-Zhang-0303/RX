#pragma once
//=====================================================================//
/*!	@file
	@brief	Audio ファイル再生インターフェース
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2018、2020 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/RX/blob/master/LICENSE
*/
//=====================================================================//
#include <cstdint>
#include <functional>
#include "common/file_io.hpp"

namespace sound {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	Audio File Play クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class af_play {
	public:

		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	制御列挙型
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		enum class CTRL : uint8_t {
			NONE,		///< 何もしない
			NEXT,		///< 次の曲
			STOP,		///< 停止
			PAUSE,		///< 一時停止
			REPLAY,		///< 曲の先頭に戻って再生
			SEEK,		///< 曲のランダム再生
		};


		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	ステート列挙型
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		enum class STATE : uint8_t {
			IDLE,		///< アイドル状態
			TAG,		///< TAG パース中
			INFO,		///< フレーム情報取得中
			PLAY,		///< プレイ中
			PAUSE,		///< ポーズ中
		};


		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	制御タスク型
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		typedef std::function<CTRL ()> CTRL_TASK;


		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	情報タスク型
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		typedef std::function<void (utils::file_io& fin, const tag_t&)> TAG_TASK;


		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	更新タスク型
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		typedef std::function<void (uint32_t)> UPDATE_TASK;

			CTRL_TASK	ctrl_task_;
			TAG_TASK	tag_task_;
			UPDATE_TASK	update_task_;

			STATE		state_;

			uint32_t	all_time_;

		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		af_play() noexcept : ctrl_task_(), tag_task_(), update_task_(),
			state_(STATE::IDLE), all_time_(0)
		{ }


		//-----------------------------------------------------------------//
		/*!
			@brief	制御タスクの設定 @n
					※再生制御のタスク
			@param[in]	task	制御タスク
		*/
		//-----------------------------------------------------------------//
		void set_ctrl_task(CTRL_TASK task) noexcept
		{
			ctrl_task_ = task;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	タグ・タスクの設定 @n
					※タグ情報表示のタスク
			@param[in]	task	タグ・タスク
		*/
		//-----------------------------------------------------------------//
		void set_tag_task(TAG_TASK task) noexcept
		{
			tag_task_ = task;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	アップデート・タスクの設定 @n
					※再生１秒毎に呼ばれるタスク
			@param[in]	task	アップデート・タスク
		*/
		//-----------------------------------------------------------------//
		void set_update_task(UPDATE_TASK task) noexcept
		{
			update_task_ = task;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ミリ秒単位のシステム待ち @n
					※RTOS の場合は、処理を他で使えるようにする。
			@param[in]	ms	ミリ秒
		*/
		//-----------------------------------------------------------------//
		void system_delay(uint32_t ms) noexcept
		{
#ifdef RTOS
			vTaskDelay(pdMS_TO_TICKS(ms));
#endif
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	ステートを設定
			@param[in]	state	ステート
		*/
		//-----------------------------------------------------------------//
		void set_state(STATE state) noexcept { state_ = state; }


		//-----------------------------------------------------------------//
		/*!
			@brief	ステートを取得
			@return ステート
		*/
		//-----------------------------------------------------------------//
		auto get_state() const noexcept { return state_; }


		//-----------------------------------------------------------------//
		/*!
			@brief	最大演奏時間の取得
			@return 最大演奏時間
		*/
		//-----------------------------------------------------------------//
		auto get_all_time() const noexcept { return all_time_; }
	};
}
