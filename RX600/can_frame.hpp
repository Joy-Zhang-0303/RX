#pragma once
//=========================================================================//
/*!	@file
	@brief	CAN フレーム・クラス
    @author 平松邦仁 (hira@rvf-rc45.net)
	@copyright	Copyright (C) 2023 Kunihito Hiramatsu @n
				Released under the MIT license @n
				https://github.com/hirakuni45/RX/blob/master/LICENSE
*/
//=========================================================================//
#include "common/device.hpp"

namespace device {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	CAN フレーム構造・クラス @n
				・RX CAN のメールボックス構造を表現したもの @n
				・内部は、32 ビット x 4 ワードの単純な構造 @n
				pad[0]::B31 = IDE @n
				pad[0]::B30 = RTR @n
				pad[0]::B28-B18 = SID @n
				pad[0]::B17-B0  = EID @n
				pad[1]::B20-B16 = DLC @n
				pad[1]::B15-B8  = DATA0 @n
				pad[1]::B7-B0   = DATA1 @n
				pad[2]::B31-B24 = DATA2 @n
				pad[2]::B23-B16 = DATA3 @n
				pad[2]::B15-B8  = DATA4 @n
				pad[2]::B7-B0   = DATA5 @n
				pad[3]::B31-B24 = DATA6 @n
				pad[3]::B23-B16 = DATA7 @n
				pad[3]::B15-B0  = TS
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	class can_frame {
		uint32_t	pad[4];

	public:
		//-----------------------------------------------------------------//
		/*!
			@brief  コンストラクタ
		*/
		//-----------------------------------------------------------------//
		can_frame() : pad{ 0 } { }


		//-----------------------------------------------------------------//
		/*!
			@brief	IDE の設定
			@param[in]	v	値
		*/
		//-----------------------------------------------------------------//
		void set_IDE(bool v) {
			if(v) { pad[0] |=   1 << 31;  }
			else  { pad[0] &= ~(1 << 31); }
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	IDE の取得
			@return		IDE
		*/
		//-----------------------------------------------------------------//
		bool get_IDE() const { return (pad[0] >> 31) & 1; }


		//-----------------------------------------------------------------//
		/*!
			@brief	RTR の設定
			@param[in]	v	値
		*/
		//-----------------------------------------------------------------//
		void set_RTR(bool v) { if(v) pad[0] |= 1 << 30; else pad[0] &= ~(1 << 30); }


		//-----------------------------------------------------------------//
		/*!
			@brief	RTR の取得
			@return		RTR
		*/
		//-----------------------------------------------------------------//
		bool get_RTR() const { return (pad[0] >> 30) & 1; }


		//-----------------------------------------------------------------//
		/*!
			@brief	標準 ID の設定
			@param[in]	id	標準 ID
		*/
		//-----------------------------------------------------------------//
		void set_SID(uint32_t id) {
			pad[0] &= ~(0x7ff << 18);
			pad[0] |= (id << 18);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	標準 ID の取得
			@return	標準 ID
		*/
		//-----------------------------------------------------------------//
		uint32_t get_SID() const { return (pad[0] >> 18) & 0x7ff; }


		//-----------------------------------------------------------------//
		/*!
			@brief	拡張 ID の設定
			@param[in]	id	拡張 ID
		*/
		//-----------------------------------------------------------------//
		void set_EID(uint32_t id) {
			pad[0] &= ~(0x3'ffff);
			pad[0] |= id;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	拡張 ID の取得
			@return	拡張 ID
		*/
		//-----------------------------------------------------------------//
		uint32_t get_EID() const { return pad[0] & 0x3'ffff; }


		//-----------------------------------------------------------------//
		/*!
			@brief	DLC の設定
			@param[in]	n	DLC
		*/
		//-----------------------------------------------------------------//
		void set_DLC(uint32_t n) {
			pad[1] &= ~(0xf << 16);
			pad[1] |=  (n << 16);
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	DLC の取得
			@return	DLC
		*/
		//-----------------------------------------------------------------//
		uint32_t get_DLC() const { return (pad[1] >> 16) & 0xf; }


		//-----------------------------------------------------------------//
		/*!
			@brief	DATA の設定
			@param[in]	idx	インデックス（０～７）
			@param[in]	d	設定値
		*/
		//-----------------------------------------------------------------//
		void set_DATA(uint32_t idx, uint8_t d) {
			uint32_t sfc = (~(idx + 6) & 0x3) << 3;
			uint32_t ofs = (idx + 6) >> 2;
			pad[ofs] &= ~(0xff << sfc);
			pad[ofs] |= static_cast<uint32_t>(d) << sfc;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	DATA の取得
			@param[in]	idx	インデックス（０～７）
			@return 値
		*/
		//-----------------------------------------------------------------//
		uint8_t get_DATA(uint32_t idx) const {
			uint32_t sfc = (~(idx + 6) & 0x3) << 3;
			uint32_t ofs = (idx + 6) >> 2;
			return pad[ofs] >> sfc;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	TS の設定
			@param[in]	ts	値
		*/
		//-----------------------------------------------------------------//
		void set_TS(uint16_t ts) {
			pad[3] &= 0xffff0000;
			pad[3] |= ts;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	TS の取得
			@return 値
		*/
		//-----------------------------------------------------------------//
		uint16_t get_TS() const { return pad[3] & 0xffff; }


		//-----------------------------------------------------------------//
		/*!
			@brief	統合 ID の設定 (STD + EID)
			@param[in]	id	統合 ID
		*/
		//-----------------------------------------------------------------//
		void set_id(uint32_t id) { set_SID(id); set_EID(id >> 11); }


		//-----------------------------------------------------------------//
		/*!
			@brief	統合 ID の取得
			@return 統合 ID
		*/
		//-----------------------------------------------------------------//
		uint32_t get_id() const {
			if(get_IDE() == 0) {
				return get_SID();
			} else {
	 			return get_SID() | (get_EID() << 11);
			}
		}


		const uint32_t& operator [] (uint32_t idx) const { return pad[idx]; }

		uint32_t& operator [] (uint32_t idx) { return pad[idx]; }
	};

}
